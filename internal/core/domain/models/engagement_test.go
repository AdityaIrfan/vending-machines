// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testEngagements(t *testing.T) {
	t.Parallel()

	query := Engagements()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testEngagementsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Engagement{}
	if err = randomize.Struct(seed, o, engagementDBTypes, true, engagementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Engagement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Engagements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEngagementsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Engagement{}
	if err = randomize.Struct(seed, o, engagementDBTypes, true, engagementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Engagement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Engagements().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Engagements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEngagementsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Engagement{}
	if err = randomize.Struct(seed, o, engagementDBTypes, true, engagementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Engagement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EngagementSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Engagements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEngagementsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Engagement{}
	if err = randomize.Struct(seed, o, engagementDBTypes, true, engagementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Engagement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := EngagementExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Engagement exists: %s", err)
	}
	if !e {
		t.Errorf("Expected EngagementExists to return true, but got false.")
	}
}

func testEngagementsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Engagement{}
	if err = randomize.Struct(seed, o, engagementDBTypes, true, engagementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Engagement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	engagementFound, err := FindEngagement(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if engagementFound == nil {
		t.Error("want a record, got nil")
	}
}

func testEngagementsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Engagement{}
	if err = randomize.Struct(seed, o, engagementDBTypes, true, engagementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Engagement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Engagements().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testEngagementsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Engagement{}
	if err = randomize.Struct(seed, o, engagementDBTypes, true, engagementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Engagement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Engagements().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testEngagementsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	engagementOne := &Engagement{}
	engagementTwo := &Engagement{}
	if err = randomize.Struct(seed, engagementOne, engagementDBTypes, false, engagementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Engagement struct: %s", err)
	}
	if err = randomize.Struct(seed, engagementTwo, engagementDBTypes, false, engagementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Engagement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = engagementOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = engagementTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Engagements().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testEngagementsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	engagementOne := &Engagement{}
	engagementTwo := &Engagement{}
	if err = randomize.Struct(seed, engagementOne, engagementDBTypes, false, engagementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Engagement struct: %s", err)
	}
	if err = randomize.Struct(seed, engagementTwo, engagementDBTypes, false, engagementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Engagement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = engagementOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = engagementTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Engagements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func engagementBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Engagement) error {
	*o = Engagement{}
	return nil
}

func engagementAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Engagement) error {
	*o = Engagement{}
	return nil
}

func engagementAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Engagement) error {
	*o = Engagement{}
	return nil
}

func engagementBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Engagement) error {
	*o = Engagement{}
	return nil
}

func engagementAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Engagement) error {
	*o = Engagement{}
	return nil
}

func engagementBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Engagement) error {
	*o = Engagement{}
	return nil
}

func engagementAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Engagement) error {
	*o = Engagement{}
	return nil
}

func engagementBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Engagement) error {
	*o = Engagement{}
	return nil
}

func engagementAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Engagement) error {
	*o = Engagement{}
	return nil
}

func testEngagementsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Engagement{}
	o := &Engagement{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, engagementDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Engagement object: %s", err)
	}

	AddEngagementHook(boil.BeforeInsertHook, engagementBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	engagementBeforeInsertHooks = []EngagementHook{}

	AddEngagementHook(boil.AfterInsertHook, engagementAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	engagementAfterInsertHooks = []EngagementHook{}

	AddEngagementHook(boil.AfterSelectHook, engagementAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	engagementAfterSelectHooks = []EngagementHook{}

	AddEngagementHook(boil.BeforeUpdateHook, engagementBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	engagementBeforeUpdateHooks = []EngagementHook{}

	AddEngagementHook(boil.AfterUpdateHook, engagementAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	engagementAfterUpdateHooks = []EngagementHook{}

	AddEngagementHook(boil.BeforeDeleteHook, engagementBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	engagementBeforeDeleteHooks = []EngagementHook{}

	AddEngagementHook(boil.AfterDeleteHook, engagementAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	engagementAfterDeleteHooks = []EngagementHook{}

	AddEngagementHook(boil.BeforeUpsertHook, engagementBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	engagementBeforeUpsertHooks = []EngagementHook{}

	AddEngagementHook(boil.AfterUpsertHook, engagementAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	engagementAfterUpsertHooks = []EngagementHook{}
}

func testEngagementsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Engagement{}
	if err = randomize.Struct(seed, o, engagementDBTypes, true, engagementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Engagement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Engagements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEngagementsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Engagement{}
	if err = randomize.Struct(seed, o, engagementDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Engagement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(engagementColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Engagements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEngagementsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Engagement{}
	if err = randomize.Struct(seed, o, engagementDBTypes, true, engagementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Engagement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEngagementsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Engagement{}
	if err = randomize.Struct(seed, o, engagementDBTypes, true, engagementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Engagement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EngagementSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEngagementsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Engagement{}
	if err = randomize.Struct(seed, o, engagementDBTypes, true, engagementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Engagement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Engagements().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	engagementDBTypes = map[string]string{`ID`: `bigint`, `Action`: `character varying`, `ActionTime`: `timestamp without time zone`, `Browser`: `character varying`, `BrowserVersion`: `character varying`, `Platform`: `character varying`, `Identifier`: `text`, `Host`: `character varying`, `Path`: `character varying`, `FullURL`: `character varying`, `ViewPort`: `character varying`, `Os`: `character varying`, `OsVersion`: `character varying`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_                 = bytes.MinRead
)

func testEngagementsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(engagementPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(engagementAllColumns) == len(engagementPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Engagement{}
	if err = randomize.Struct(seed, o, engagementDBTypes, true, engagementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Engagement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Engagements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, engagementDBTypes, true, engagementPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Engagement struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testEngagementsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(engagementAllColumns) == len(engagementPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Engagement{}
	if err = randomize.Struct(seed, o, engagementDBTypes, true, engagementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Engagement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Engagements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, engagementDBTypes, true, engagementPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Engagement struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(engagementAllColumns, engagementPrimaryKeyColumns) {
		fields = engagementAllColumns
	} else {
		fields = strmangle.SetComplement(
			engagementAllColumns,
			engagementPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := EngagementSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testEngagementsUpsert(t *testing.T) {
	t.Parallel()

	if len(engagementAllColumns) == len(engagementPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Engagement{}
	if err = randomize.Struct(seed, &o, engagementDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Engagement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Engagement: %s", err)
	}

	count, err := Engagements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, engagementDBTypes, false, engagementPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Engagement struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Engagement: %s", err)
	}

	count, err = Engagements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
